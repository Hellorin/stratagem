/*
* generated by Xtext
*/
grammar InternalTransitionSystemDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package ch.unige.cui.smv.stratagem.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package ch.unige.cui.smv.stratagem.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import ch.unige.cui.smv.stratagem.xtext.services.TransitionSystemDslGrammarAccess;

}

@parser::members {

 	private TransitionSystemDslGrammarAccess grammarAccess;
 	
    public InternalTransitionSystemDslParser(TokenStream input, TransitionSystemDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "TransitionSystem";	
   	}
   	
   	@Override
   	protected TransitionSystemDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTransitionSystem
entryRuleTransitionSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionSystemRule()); }
	 iv_ruleTransitionSystem=ruleTransitionSystem 
	 { $current=$iv_ruleTransitionSystem.current; } 
	 EOF 
;

// Rule TransitionSystem
ruleTransitionSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='TransitionSystem' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionSystemAccess().getTransitionSystemKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionSystemAccess().getAdtADTParserRuleCall_1_0()); 
	    }
		lv_adt_1_0=ruleADT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionSystemRule());
	        }
       		set(
       			$current, 
       			"adt",
        		lv_adt_1_0, 
        		"ADT");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='initialState' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTransitionSystemAccess().getInitialStateKeyword_2());
    }
	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransitionSystemAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionSystemAccess().getInitialStateTermParserRuleCall_4_0()); 
	    }
		lv_initialState_4_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionSystemRule());
	        }
       		set(
       			$current, 
       			"initialState",
        		lv_initialState_4_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='Strategies' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTransitionSystemAccess().getStrategiesKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionSystemAccess().getAuxiliaryAuxiliaryParserRuleCall_6_0()); 
	    }
		lv_auxiliary_6_0=ruleAuxiliary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionSystemRule());
	        }
       		add(
       			$current, 
       			"auxiliary",
        		lv_auxiliary_6_0, 
        		"Auxiliary");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='Transitions' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTransitionSystemAccess().getTransitionsKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionSystemAccess().getTransitionsTransitionParserRuleCall_8_0()); 
	    }
		lv_transitions_8_0=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionSystemRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_8_0, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTransitionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTransitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getBodyNonVariableStrategyParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleNonVariableStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"NonVariableStrategy");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleAuxiliary
entryRuleAuxiliary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAuxiliaryRule()); }
	 iv_ruleAuxiliary=ruleAuxiliary 
	 { $current=$iv_ruleAuxiliary.current; } 
	 EOF 
;

// Rule Auxiliary
ruleAuxiliary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAuxiliaryAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAuxiliaryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAuxiliaryAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAuxiliaryAccess().getFormalParamsVariableStrategyParserRuleCall_1_1_0()); 
	    }
		lv_formalParams_2_0=ruleVariableStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAuxiliaryRule());
	        }
       		add(
       			$current, 
       			"formalParams",
        		lv_formalParams_2_0, 
        		"VariableStrategy");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAuxiliaryAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAuxiliaryAccess().getFormalParamsVariableStrategyParserRuleCall_1_2_1_0()); 
	    }
		lv_formalParams_4_0=ruleVariableStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAuxiliaryRule());
	        }
       		add(
       			$current, 
       			"formalParams",
        		lv_formalParams_4_0, 
        		"VariableStrategy");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAuxiliaryAccess().getRightParenthesisKeyword_1_3());
    }
)?	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAuxiliaryAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAuxiliaryAccess().getBodyNonVariableStrategyParserRuleCall_3_0()); 
	    }
		lv_body_7_0=ruleNonVariableStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAuxiliaryRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_7_0, 
        		"NonVariableStrategy");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStrategy
entryRuleStrategy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStrategyRule()); }
	 iv_ruleStrategy=ruleStrategy 
	 { $current=$iv_ruleStrategy.current; } 
	 EOF 
;

// Rule Strategy
ruleStrategy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStrategyAccess().getNonVariableStrategyParserRuleCall_0()); 
    }
    this_NonVariableStrategy_0=ruleNonVariableStrategy
    { 
        $current = $this_NonVariableStrategy_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStrategyAccess().getVariableStrategyParserRuleCall_1()); 
    }
    this_VariableStrategy_1=ruleVariableStrategy
    { 
        $current = $this_VariableStrategy_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleNonVariableStrategy
entryRuleNonVariableStrategy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNonVariableStrategyRule()); }
	 iv_ruleNonVariableStrategy=ruleNonVariableStrategy 
	 { $current=$iv_ruleNonVariableStrategy.current; } 
	 EOF 
;

// Rule NonVariableStrategy
ruleNonVariableStrategy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	rulePredefStrats)=>
    { 
        newCompositeNode(grammarAccess.getNonVariableStrategyAccess().getPredefStratsParserRuleCall_0()); 
    }
    this_PredefStrats_0=rulePredefStrats
    { 
        $current = $this_PredefStrats_0.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getNonVariableStrategyAccess().getDeclaredStrategyInstanceParserRuleCall_1()); 
    }
    this_DeclaredStrategyInstance_1=ruleDeclaredStrategyInstance
    { 
        $current = $this_DeclaredStrategyInstance_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePredefStrats
entryRulePredefStrats returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPredefStratsRule()); }
	 iv_rulePredefStrats=rulePredefStrats 
	 { $current=$iv_rulePredefStrats.current; } 
	 EOF 
;

// Rule PredefStrats
rulePredefStrats returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPredefStratsAccess().getIdentityParserRuleCall_0()); 
    }
    this_Identity_0=ruleIdentity
    { 
        $current = $this_Identity_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredefStratsAccess().getFailParserRuleCall_1()); 
    }
    this_Fail_1=ruleFail
    { 
        $current = $this_Fail_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredefStratsAccess().getChoiceParserRuleCall_2()); 
    }
    this_Choice_2=ruleChoice
    { 
        $current = $this_Choice_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredefStratsAccess().getSequenceParserRuleCall_3()); 
    }
    this_Sequence_3=ruleSequence
    { 
        $current = $this_Sequence_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredefStratsAccess().getFixpointParserRuleCall_4()); 
    }
    this_Fixpoint_4=ruleFixpoint
    { 
        $current = $this_Fixpoint_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredefStratsAccess().getIfThenElseParserRuleCall_5()); 
    }
    this_IfThenElse_5=ruleIfThenElse
    { 
        $current = $this_IfThenElse_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredefStratsAccess().getNotParserRuleCall_6()); 
    }
    this_Not_6=ruleNot
    { 
        $current = $this_Not_6.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredefStratsAccess().getSimpleStrategyParserRuleCall_7()); 
    }
    this_SimpleStrategy_7=ruleSimpleStrategy
    { 
        $current = $this_SimpleStrategy_7.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredefStratsAccess().getOneParserRuleCall_8()); 
    }
    this_One_8=ruleOne
    { 
        $current = $this_One_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredefStratsAccess().getSaturationParserRuleCall_9()); 
    }
    this_Saturation_9=ruleSaturation
    { 
        $current = $this_Saturation_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredefStratsAccess().getUnionParserRuleCall_10()); 
    }
    this_Union_10=ruleUnion
    { 
        $current = $this_Union_10.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOne
entryRuleOne returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOneRule()); }
	 iv_ruleOne=ruleOne 
	 { $current=$iv_ruleOne.current; } 
	 EOF 
;

// Rule One
ruleOne returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='One' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOneAccess().getOneKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOneAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOneAccess().getSStrategyParserRuleCall_2_0()); 
	    }
		lv_S_2_0=ruleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOneRule());
	        }
       		set(
       			$current, 
       			"S",
        		lv_S_2_0, 
        		"Strategy");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOneAccess().getCommaKeyword_3());
    }
(
(
		lv_n_4_0=RULE_INT
		{
			newLeafNode(lv_n_4_0, grammarAccess.getOneAccess().getNINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOneRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"n",
        		lv_n_4_0, 
        		"INT");
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOneAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleDeclaredStrategyInstance
entryRuleDeclaredStrategyInstance returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaredStrategyInstanceRule()); }
	 iv_ruleDeclaredStrategyInstance=ruleDeclaredStrategyInstance 
	 { $current=$iv_ruleDeclaredStrategyInstance.current; } 
	 EOF 
;

// Rule DeclaredStrategyInstance
ruleDeclaredStrategyInstance returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDeclaredStrategyInstanceAccess().getDeclaredStrategyInstanceAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getDeclaredStrategyInstanceRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getDeclaredStrategyInstanceAccess().getDeclarationDeclaredStrategyCrossReference_1_0()); 
	}

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDeclaredStrategyInstanceAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaredStrategyInstanceAccess().getActualParamsStrategyParserRuleCall_3_0_0()); 
	    }
		lv_actualParams_3_0=ruleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaredStrategyInstanceRule());
	        }
       		add(
       			$current, 
       			"actualParams",
        		lv_actualParams_3_0, 
        		"Strategy");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDeclaredStrategyInstanceAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaredStrategyInstanceAccess().getActualParamsStrategyParserRuleCall_3_1_1_0()); 
	    }
		lv_actualParams_5_0=ruleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaredStrategyInstanceRule());
	        }
       		add(
       			$current, 
       			"actualParams",
        		lv_actualParams_5_0, 
        		"Strategy");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDeclaredStrategyInstanceAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleSaturation
entryRuleSaturation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSaturationRule()); }
	 iv_ruleSaturation=ruleSaturation 
	 { $current=$iv_ruleSaturation.current; } 
	 EOF 
;

// Rule Saturation
ruleSaturation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Saturation' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSaturationAccess().getSaturationKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSaturationAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSaturationAccess().getSStrategyParserRuleCall_2_0()); 
	    }
		lv_S_2_0=ruleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSaturationRule());
	        }
       		set(
       			$current, 
       			"S",
        		lv_S_2_0, 
        		"Strategy");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSaturationAccess().getCommaKeyword_3());
    }
(
(
		lv_n_4_0=RULE_INT
		{
			newLeafNode(lv_n_4_0, grammarAccess.getSaturationAccess().getNINTTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSaturationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"n",
        		lv_n_4_0, 
        		"INT");
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSaturationAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleIfThenElse
entryRuleIfThenElse returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIfThenElseRule()); }
	 iv_ruleIfThenElse=ruleIfThenElse 
	 { $current=$iv_ruleIfThenElse.current; } 
	 EOF 
;

// Rule IfThenElse
ruleIfThenElse returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='IfThenElse' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfThenElseAccess().getIfThenElseKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfThenElseAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getS1StrategyParserRuleCall_2_0()); 
	    }
		lv_S1_2_0=ruleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		set(
       			$current, 
       			"S1",
        		lv_S1_2_0, 
        		"Strategy");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfThenElseAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getS2StrategyParserRuleCall_4_0()); 
	    }
		lv_S2_4_0=ruleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		set(
       			$current, 
       			"S2",
        		lv_S2_4_0, 
        		"Strategy");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIfThenElseAccess().getCommaKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfThenElseAccess().getS3StrategyParserRuleCall_6_0()); 
	    }
		lv_S3_6_0=ruleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfThenElseRule());
	        }
       		set(
       			$current, 
       			"S3",
        		lv_S3_6_0, 
        		"Strategy");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getIfThenElseAccess().getRightParenthesisKeyword_7());
    }
)
;





// Entry rule entryRuleSimpleStrategy
entryRuleSimpleStrategy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleStrategyRule()); }
	 iv_ruleSimpleStrategy=ruleSimpleStrategy 
	 { $current=$iv_ruleSimpleStrategy.current; } 
	 EOF 
;

// Rule SimpleStrategy
ruleSimpleStrategy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='{' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSimpleStrategyAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleStrategyAccess().getEquationsRewriteRuleParserRuleCall_1_0()); 
	    }
		lv_equations_1_0=ruleRewriteRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleStrategyRule());
	        }
       		add(
       			$current, 
       			"equations",
        		lv_equations_1_0, 
        		"RewriteRule");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSimpleStrategyAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleStrategyAccess().getEquationsRewriteRuleParserRuleCall_2_1_0()); 
	    }
		lv_equations_3_0=ruleRewriteRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleStrategyRule());
	        }
       		add(
       			$current, 
       			"equations",
        		lv_equations_3_0, 
        		"RewriteRule");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSimpleStrategyAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleNot
entryRuleNot returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNotRule()); }
	 iv_ruleNot=ruleNot 
	 { $current=$iv_ruleNot.current; } 
	 EOF 
;

// Rule Not
ruleNot returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Not' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNotAccess().getNotKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNotAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNotAccess().getSSimpleStrategyParserRuleCall_2_0()); 
	    }
		lv_S_2_0=ruleSimpleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNotRule());
	        }
       		set(
       			$current, 
       			"S",
        		lv_S_2_0, 
        		"SimpleStrategy");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNotAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleFixpoint
entryRuleFixpoint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFixpointRule()); }
	 iv_ruleFixpoint=ruleFixpoint 
	 { $current=$iv_ruleFixpoint.current; } 
	 EOF 
;

// Rule Fixpoint
ruleFixpoint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Fixpoint' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFixpointAccess().getFixpointKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFixpointAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFixpointAccess().getSStrategyParserRuleCall_2_0()); 
	    }
		lv_S_2_0=ruleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFixpointRule());
	        }
       		set(
       			$current, 
       			"S",
        		lv_S_2_0, 
        		"Strategy");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFixpointAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleChoice
entryRuleChoice returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChoiceRule()); }
	 iv_ruleChoice=ruleChoice 
	 { $current=$iv_ruleChoice.current; } 
	 EOF 
;

// Rule Choice
ruleChoice returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Choice' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChoiceAccess().getChoiceKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChoiceAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChoiceAccess().getS1StrategyParserRuleCall_2_0()); 
	    }
		lv_S1_2_0=ruleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoiceRule());
	        }
       		set(
       			$current, 
       			"S1",
        		lv_S1_2_0, 
        		"Strategy");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getChoiceAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChoiceAccess().getS2StrategyParserRuleCall_4_0()); 
	    }
		lv_S2_4_0=ruleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoiceRule());
	        }
       		set(
       			$current, 
       			"S2",
        		lv_S2_4_0, 
        		"Strategy");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getChoiceAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleUnion
entryRuleUnion returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnionRule()); }
	 iv_ruleUnion=ruleUnion 
	 { $current=$iv_ruleUnion.current; } 
	 EOF 
;

// Rule Union
ruleUnion returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Union' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUnionAccess().getUnionKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUnionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnionAccess().getS1StrategyParserRuleCall_2_0()); 
	    }
		lv_S1_2_0=ruleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionRule());
	        }
       		set(
       			$current, 
       			"S1",
        		lv_S1_2_0, 
        		"Strategy");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUnionAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUnionAccess().getS2StrategyParserRuleCall_4_0()); 
	    }
		lv_S2_4_0=ruleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUnionRule());
	        }
       		set(
       			$current, 
       			"S2",
        		lv_S2_4_0, 
        		"Strategy");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUnionAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceRule()); }
	 iv_ruleSequence=ruleSequence 
	 { $current=$iv_ruleSequence.current; } 
	 EOF 
;

// Rule Sequence
ruleSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Sequence' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSequenceAccess().getSequenceKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSequenceAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getS1StrategyParserRuleCall_2_0()); 
	    }
		lv_S1_2_0=ruleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		set(
       			$current, 
       			"S1",
        		lv_S1_2_0, 
        		"Strategy");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSequenceAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getS2StrategyParserRuleCall_4_0()); 
	    }
		lv_S2_4_0=ruleStrategy		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		set(
       			$current, 
       			"S2",
        		lv_S2_4_0, 
        		"Strategy");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSequenceAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleIdentity
entryRuleIdentity returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentityRule()); }
	 iv_ruleIdentity=ruleIdentity 
	 { $current=$iv_ruleIdentity.current; } 
	 EOF 
;

// Rule Identity
ruleIdentity returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Identity' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIdentityAccess().getIdentityKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getIdentityAccess().getIdentityAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleFail
entryRuleFail returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFailRule()); }
	 iv_ruleFail=ruleFail 
	 { $current=$iv_ruleFail.current; } 
	 EOF 
;

// Rule Fail
ruleFail returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Fail' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getFailAccess().getFailKeyword_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getFailAccess().getFailAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleVariableStrategy
entryRuleVariableStrategy returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableStrategyRule()); }
	 iv_ruleVariableStrategy=ruleVariableStrategy 
	 { $current=$iv_ruleVariableStrategy.current; } 
	 EOF 
;

// Rule VariableStrategy
ruleVariableStrategy returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableStrategyAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableStrategyRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleATerm
entryRuleATerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getATermRule()); }
	 iv_ruleATerm=ruleATerm 
	 { $current=$iv_ruleATerm.current; } 
	 EOF 
;

// Rule ATerm
ruleATerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getATermAccess().getTermParserRuleCall_0()); 
    }
    this_Term_0=ruleTerm
    { 
        $current = $this_Term_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getATermAccess().getVariableParserRuleCall_1()); 
    }
    this_Variable_1=ruleVariable
    { 
        $current = $this_Variable_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleASort
entryRuleASort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getASortRule()); }
	 iv_ruleASort=ruleASort 
	 { $current=$iv_ruleASort.current; } 
	 EOF 
;

// Rule ASort
ruleASort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getASortAccess().getSubSortParserRuleCall_0()); 
    }
    this_SubSort_0=ruleSubSort
    { 
        $current = $this_SubSort_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getASortAccess().getSortParserRuleCall_1()); 
    }
    this_Sort_1=ruleSort
    { 
        $current = $this_Sort_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleADT
entryRuleADT returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getADTRule()); }
	 iv_ruleADT=ruleADT 
	 { $current=$iv_ruleADT.current; } 
	 EOF 
;

// Rule ADT
ruleADT returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ADT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getADTAccess().getADTKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getADTAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getADTRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='Signature' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getADTAccess().getSignatureKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getADTAccess().getSignatureSignatureParserRuleCall_3_0()); 
	    }
		lv_signature_3_0=ruleSignature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getADTRule());
	        }
       		set(
       			$current, 
       			"signature",
        		lv_signature_3_0, 
        		"Signature");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'Axioms' 
)=>	otherlv_4='Axioms' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getADTAccess().getAxiomsKeyword_4_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getADTAccess().getEquationsEquationParserRuleCall_4_1_0()); 
	    }
		lv_equations_5_0=ruleEquation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getADTRule());
	        }
       		add(
       			$current, 
       			"equations",
        		lv_equations_5_0, 
        		"Equation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getADTAccess().getEquationsEquationParserRuleCall_4_2_0()); 
	    }
		lv_equations_6_0=ruleEquation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getADTRule());
	        }
       		add(
       			$current, 
       			"equations",
        		lv_equations_6_0, 
        		"Equation");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(((	'Variables' 
)=>	otherlv_7='Variables' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getADTAccess().getVariablesKeyword_5_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getADTAccess().getVariablesVariableDeclarationParserRuleCall_5_1_0()); 
	    }
		lv_variables_8_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getADTRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_8_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getADTAccess().getVariablesVariableDeclarationParserRuleCall_5_2_0()); 
	    }
		lv_variables_9_0=ruleVariableDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getADTRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_9_0, 
        		"VariableDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleSignature
entryRuleSignature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSignatureRule()); }
	 iv_ruleSignature=ruleSignature 
	 { $current=$iv_ruleSignature.current; } 
	 EOF 
;

// Rule Signature
ruleSignature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Sorts' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSignatureAccess().getSortsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureAccess().getSortsASortParserRuleCall_1_0()); 
	    }
		lv_sorts_1_0=ruleASort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureRule());
	        }
       		add(
       			$current, 
       			"sorts",
        		lv_sorts_1_0, 
        		"ASort");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSignatureAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureAccess().getSortsASortParserRuleCall_2_1_0()); 
	    }
		lv_sorts_3_0=ruleASort		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureRule());
	        }
       		add(
       			$current, 
       			"sorts",
        		lv_sorts_3_0, 
        		"ASort");
	        afterParserOrEnumRuleCall();
	    }

)
))*(((	'Generators' 
)=>	otherlv_4='Generators' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSignatureAccess().getGeneratorsKeyword_3_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureAccess().getGeneratorsOperationParserRuleCall_3_1_0()); 
	    }
		lv_generators_5_0=ruleOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureRule());
	        }
       		add(
       			$current, 
       			"generators",
        		lv_generators_5_0, 
        		"Operation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureAccess().getGeneratorsOperationParserRuleCall_3_2_0()); 
	    }
		lv_generators_6_0=ruleOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureRule());
	        }
       		add(
       			$current, 
       			"generators",
        		lv_generators_6_0, 
        		"Operation");
	        afterParserOrEnumRuleCall();
	    }

)
)*)(((	'Operations' 
)=>	otherlv_7='Operations' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSignatureAccess().getOperationsKeyword_4_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureAccess().getOperationsOperationParserRuleCall_4_1_0()); 
	    }
		lv_operations_8_0=ruleOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureRule());
	        }
       		add(
       			$current, 
       			"operations",
        		lv_operations_8_0, 
        		"Operation");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignatureAccess().getOperationsOperationParserRuleCall_4_2_0()); 
	    }
		lv_operations_9_0=ruleOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignatureRule());
	        }
       		add(
       			$current, 
       			"operations",
        		lv_operations_9_0, 
        		"Operation");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	 iv_ruleVariableDeclaration=ruleVariableDeclaration 
	 { $current=$iv_ruleVariableDeclaration.current; } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVariableDeclarationAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableDeclarationRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getSortASortCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleEquation
entryRuleEquation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEquationRule()); }
	 iv_ruleEquation=ruleEquation 
	 { $current=$iv_ruleEquation.current; } 
	 EOF 
;

// Rule Equation
ruleEquation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEquationAccess().getLeftHandTermATermParserRuleCall_0_0()); 
	    }
		lv_leftHandTerm_0_0=ruleATerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquationRule());
	        }
       		set(
       			$current, 
       			"leftHandTerm",
        		lv_leftHandTerm_0_0, 
        		"ATerm");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEquationAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEquationAccess().getRightHandTermATermParserRuleCall_2_0()); 
	    }
		lv_rightHandTerm_2_0=ruleATerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEquationRule());
	        }
       		set(
       			$current, 
       			"rightHandTerm",
        		lv_rightHandTerm_2_0, 
        		"ATerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleRewriteRule
entryRuleRewriteRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRewriteRuleRule()); }
	 iv_ruleRewriteRule=ruleRewriteRule 
	 { $current=$iv_ruleRewriteRule.current; } 
	 EOF 
;

// Rule RewriteRule
ruleRewriteRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRewriteRuleAccess().getLeftHandTermATermParserRuleCall_0_0()); 
	    }
		lv_leftHandTerm_0_0=ruleATerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRewriteRuleRule());
	        }
       		set(
       			$current, 
       			"leftHandTerm",
        		lv_leftHandTerm_0_0, 
        		"ATerm");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='->' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRewriteRuleAccess().getHyphenMinusGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRewriteRuleAccess().getRightHandTermATermParserRuleCall_2_0()); 
	    }
		lv_rightHandTerm_2_0=ruleATerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRewriteRuleRule());
	        }
       		set(
       			$current, 
       			"rightHandTerm",
        		lv_rightHandTerm_2_0, 
        		"ATerm");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleSubSort
entryRuleSubSort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubSortRule()); }
	 iv_ruleSubSort=ruleSubSort 
	 { $current=$iv_ruleSubSort.current; } 
	 EOF 
;

// Rule SubSort
ruleSubSort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getSubSortAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubSortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSubSortAccess().getLessThanSignKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubSortRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getSubSortAccess().getSuperSortASortCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleSort
entryRuleSort returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSortRule()); }
	 iv_ruleSort=ruleSort 
	 { $current=$iv_ruleSort.current; } 
	 EOF 
;

// Rule Sort
ruleSort returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSortAccess().getSortAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSortAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSortRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTermAccess().getTermAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTermRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getTermAccess().getOperationSymbolOperationCrossReference_1_0()); 
	}

)
)(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTermAccess().getLeftParenthesisKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getSubtermsATermParserRuleCall_2_1_0()); 
	    }
		lv_subterms_3_0=ruleATerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		add(
       			$current, 
       			"subterms",
        		lv_subterms_3_0, 
        		"ATerm");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getTermAccess().getCommaKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getSubtermsATermParserRuleCall_2_2_1_0()); 
	    }
		lv_subterms_5_0=ruleATerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		add(
       			$current, 
       			"subterms",
        		lv_subterms_5_0, 
        		"ATerm");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getTermAccess().getRightParenthesisKeyword_2_3());
    }
)?)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getVariableAccess().getVariableAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
        }
	otherlv_1=RULE_TERMVAR
	{
		newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getDeclarationVariableDeclarationCrossReference_1_0()); 
	}

)
))
;





// Entry rule entryRuleOperation
entryRuleOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperationRule()); }
	 iv_ruleOperation=ruleOperation 
	 { $current=$iv_ruleOperation.current; } 
	 EOF 
;

// Rule Operation
ruleOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getOperationAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOperationAccess().getColonKeyword_1());
    }
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getOperationAccess().getFormalParametersASortCrossReference_2_0_0()); 
	}

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOperationAccess().getCommaKeyword_2_1_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getOperationAccess().getFormalParametersASortCrossReference_2_1_1_0()); 
	}

)
))*	otherlv_5='->' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getOperationAccess().getHyphenMinusGreaterThanSignKeyword_2_2());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperationRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getOperationAccess().getReturnTypeASortCrossReference_3_0()); 
	}

)
))
;





RULE_TERMVAR : '$' '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


