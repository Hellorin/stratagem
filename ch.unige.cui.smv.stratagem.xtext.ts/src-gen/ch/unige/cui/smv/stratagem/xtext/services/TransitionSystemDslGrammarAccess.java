/*
* generated by Xtext
*/
package ch.unige.cui.smv.stratagem.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TransitionSystemDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TransitionSystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TransitionSystem");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTransitionSystemKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAdtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAdtADTParserRuleCall_1_0 = (RuleCall)cAdtAssignment_1.eContents().get(0);
		private final Keyword cInitialStateKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cInitialStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cInitialStateTermParserRuleCall_4_0 = (RuleCall)cInitialStateAssignment_4.eContents().get(0);
		private final Keyword cStrategiesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAuxiliaryAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAuxiliaryAuxiliaryParserRuleCall_6_0 = (RuleCall)cAuxiliaryAssignment_6.eContents().get(0);
		private final Keyword cTransitionsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTransitionsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTransitionsTransitionParserRuleCall_8_0 = (RuleCall)cTransitionsAssignment_8.eContents().get(0);
		private final Assignment cTransitionsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cTransitionsTransitionParserRuleCall_9_0 = (RuleCall)cTransitionsAssignment_9.eContents().get(0);
		
		//TransitionSystem returns ts::TransitionSystem:
		//	"TransitionSystem" adt=ADT "initialState" "=" initialState=Term "Strategies" auxiliary+=Auxiliary* "Transitions"
		//	transitions+=Transition transitions+=Transition*;
		public ParserRule getRule() { return rule; }

		//"TransitionSystem" adt=ADT "initialState" "=" initialState=Term "Strategies" auxiliary+=Auxiliary* "Transitions"
		//transitions+=Transition transitions+=Transition*
		public Group getGroup() { return cGroup; }

		//"TransitionSystem"
		public Keyword getTransitionSystemKeyword_0() { return cTransitionSystemKeyword_0; }

		//adt=ADT
		public Assignment getAdtAssignment_1() { return cAdtAssignment_1; }

		//ADT
		public RuleCall getAdtADTParserRuleCall_1_0() { return cAdtADTParserRuleCall_1_0; }

		//"initialState"
		public Keyword getInitialStateKeyword_2() { return cInitialStateKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//initialState=Term
		public Assignment getInitialStateAssignment_4() { return cInitialStateAssignment_4; }

		//Term
		public RuleCall getInitialStateTermParserRuleCall_4_0() { return cInitialStateTermParserRuleCall_4_0; }

		//"Strategies"
		public Keyword getStrategiesKeyword_5() { return cStrategiesKeyword_5; }

		//auxiliary+=Auxiliary*
		public Assignment getAuxiliaryAssignment_6() { return cAuxiliaryAssignment_6; }

		//Auxiliary
		public RuleCall getAuxiliaryAuxiliaryParserRuleCall_6_0() { return cAuxiliaryAuxiliaryParserRuleCall_6_0; }

		//"Transitions"
		public Keyword getTransitionsKeyword_7() { return cTransitionsKeyword_7; }

		//transitions+=Transition
		public Assignment getTransitionsAssignment_8() { return cTransitionsAssignment_8; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_8_0() { return cTransitionsTransitionParserRuleCall_8_0; }

		//transitions+=Transition*
		public Assignment getTransitionsAssignment_9() { return cTransitionsAssignment_9; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_9_0() { return cTransitionsTransitionParserRuleCall_9_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cBodyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBodyNonVariableStrategyParserRuleCall_2_0 = (RuleCall)cBodyAssignment_2.eContents().get(0);
		
		//Transition returns ts::DeclaredStrategy:
		//	name=ID "=" body=NonVariableStrategy;
		public ParserRule getRule() { return rule; }

		//name=ID "=" body=NonVariableStrategy
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//body=NonVariableStrategy
		public Assignment getBodyAssignment_2() { return cBodyAssignment_2; }

		//NonVariableStrategy
		public RuleCall getBodyNonVariableStrategyParserRuleCall_2_0() { return cBodyNonVariableStrategyParserRuleCall_2_0; }
	}

	public class AuxiliaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Auxiliary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFormalParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFormalParamsVariableStrategyParserRuleCall_1_1_0 = (RuleCall)cFormalParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cFormalParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cFormalParamsVariableStrategyParserRuleCall_1_2_1_0 = (RuleCall)cFormalParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyNonVariableStrategyParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//Auxiliary returns ts::DeclaredStrategy:
		//	name=ID ("(" formalParams+=VariableStrategy ("," formalParams+=VariableStrategy)* ")")? "=" body=NonVariableStrategy;
		public ParserRule getRule() { return rule; }

		//name=ID ("(" formalParams+=VariableStrategy ("," formalParams+=VariableStrategy)* ")")? "=" body=NonVariableStrategy
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//("(" formalParams+=VariableStrategy ("," formalParams+=VariableStrategy)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//formalParams+=VariableStrategy
		public Assignment getFormalParamsAssignment_1_1() { return cFormalParamsAssignment_1_1; }

		//VariableStrategy
		public RuleCall getFormalParamsVariableStrategyParserRuleCall_1_1_0() { return cFormalParamsVariableStrategyParserRuleCall_1_1_0; }

		//("," formalParams+=VariableStrategy)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//formalParams+=VariableStrategy
		public Assignment getFormalParamsAssignment_1_2_1() { return cFormalParamsAssignment_1_2_1; }

		//VariableStrategy
		public RuleCall getFormalParamsVariableStrategyParserRuleCall_1_2_1_0() { return cFormalParamsVariableStrategyParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//body=NonVariableStrategy
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//NonVariableStrategy
		public RuleCall getBodyNonVariableStrategyParserRuleCall_3_0() { return cBodyNonVariableStrategyParserRuleCall_3_0; }
	}

	public class StrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Strategy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNonVariableStrategyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableStrategyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Strategy returns ts::Strategy:
		//	NonVariableStrategy | VariableStrategy;
		public ParserRule getRule() { return rule; }

		//NonVariableStrategy | VariableStrategy
		public Alternatives getAlternatives() { return cAlternatives; }

		//NonVariableStrategy
		public RuleCall getNonVariableStrategyParserRuleCall_0() { return cNonVariableStrategyParserRuleCall_0; }

		//VariableStrategy
		public RuleCall getVariableStrategyParserRuleCall_1() { return cVariableStrategyParserRuleCall_1; }
	}

	public class NonVariableStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NonVariableStrategy");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPredefStratsParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclaredStrategyInstanceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NonVariableStrategy returns ts::NonVariableStrategy:
		//	PredefStrats | DeclaredStrategyInstance;
		public ParserRule getRule() { return rule; }

		//=> PredefStrats | DeclaredStrategyInstance
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> PredefStrats
		public RuleCall getPredefStratsParserRuleCall_0() { return cPredefStratsParserRuleCall_0; }

		//DeclaredStrategyInstance
		public RuleCall getDeclaredStrategyInstanceParserRuleCall_1() { return cDeclaredStrategyInstanceParserRuleCall_1; }
	}

	public class PredefStratsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PredefStrats");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentityParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFailParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cChoiceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSequenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFixpointParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIfThenElseParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cNotParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cSimpleStrategyParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cOneParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cSaturationParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cUnionParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		
		//PredefStrats returns ts::NonVariableStrategy:
		//	Identity | Fail | Choice | Sequence | Fixpoint | IfThenElse | Not | SimpleStrategy | One | Saturation | Union;
		public ParserRule getRule() { return rule; }

		//Identity | Fail | Choice | Sequence | Fixpoint | IfThenElse | Not | SimpleStrategy | One | Saturation | Union
		public Alternatives getAlternatives() { return cAlternatives; }

		//Identity
		public RuleCall getIdentityParserRuleCall_0() { return cIdentityParserRuleCall_0; }

		//Fail
		public RuleCall getFailParserRuleCall_1() { return cFailParserRuleCall_1; }

		//Choice
		public RuleCall getChoiceParserRuleCall_2() { return cChoiceParserRuleCall_2; }

		//Sequence
		public RuleCall getSequenceParserRuleCall_3() { return cSequenceParserRuleCall_3; }

		//Fixpoint
		public RuleCall getFixpointParserRuleCall_4() { return cFixpointParserRuleCall_4; }

		//IfThenElse
		public RuleCall getIfThenElseParserRuleCall_5() { return cIfThenElseParserRuleCall_5; }

		//Not
		public RuleCall getNotParserRuleCall_6() { return cNotParserRuleCall_6; }

		//SimpleStrategy
		public RuleCall getSimpleStrategyParserRuleCall_7() { return cSimpleStrategyParserRuleCall_7; }

		//One
		public RuleCall getOneParserRuleCall_8() { return cOneParserRuleCall_8; }

		//Saturation
		public RuleCall getSaturationParserRuleCall_9() { return cSaturationParserRuleCall_9; }

		//Union
		public RuleCall getUnionParserRuleCall_10() { return cUnionParserRuleCall_10; }
	}

	public class OneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "One");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOneKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSStrategyParserRuleCall_2_0 = (RuleCall)cSAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNINTTerminalRuleCall_4_0 = (RuleCall)cNAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//One returns ts::One:
		//	"One" "(" S=Strategy "," n=INT ")";
		public ParserRule getRule() { return rule; }

		//"One" "(" S=Strategy "," n=INT ")"
		public Group getGroup() { return cGroup; }

		//"One"
		public Keyword getOneKeyword_0() { return cOneKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//S=Strategy
		public Assignment getSAssignment_2() { return cSAssignment_2; }

		//Strategy
		public RuleCall getSStrategyParserRuleCall_2_0() { return cSStrategyParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//n=INT
		public Assignment getNAssignment_4() { return cNAssignment_4; }

		//INT
		public RuleCall getNINTTerminalRuleCall_4_0() { return cNINTTerminalRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class DeclaredStrategyInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DeclaredStrategyInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclaredStrategyInstanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeclarationDeclaredStrategyCrossReference_1_0 = (CrossReference)cDeclarationAssignment_1.eContents().get(0);
		private final RuleCall cDeclarationDeclaredStrategyIDTerminalRuleCall_1_0_1 = (RuleCall)cDeclarationDeclaredStrategyCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cActualParamsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cActualParamsStrategyParserRuleCall_3_0_0 = (RuleCall)cActualParamsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cActualParamsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cActualParamsStrategyParserRuleCall_3_1_1_0 = (RuleCall)cActualParamsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DeclaredStrategyInstance returns ts::DeclaredStrategyInstance:
		//	{ts::DeclaredStrategyInstance} declaration=[ts::DeclaredStrategy] "(" (actualParams+=Strategy (","
		//	actualParams+=Strategy)*)? ")";
		public ParserRule getRule() { return rule; }

		//{ts::DeclaredStrategyInstance} declaration=[ts::DeclaredStrategy] "(" (actualParams+=Strategy (","
		//actualParams+=Strategy)*)? ")"
		public Group getGroup() { return cGroup; }

		//{ts::DeclaredStrategyInstance}
		public Action getDeclaredStrategyInstanceAction_0() { return cDeclaredStrategyInstanceAction_0; }

		//declaration=[ts::DeclaredStrategy]
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }

		//[ts::DeclaredStrategy]
		public CrossReference getDeclarationDeclaredStrategyCrossReference_1_0() { return cDeclarationDeclaredStrategyCrossReference_1_0; }

		//ID
		public RuleCall getDeclarationDeclaredStrategyIDTerminalRuleCall_1_0_1() { return cDeclarationDeclaredStrategyIDTerminalRuleCall_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//(actualParams+=Strategy ("," actualParams+=Strategy)*)?
		public Group getGroup_3() { return cGroup_3; }

		//actualParams+=Strategy
		public Assignment getActualParamsAssignment_3_0() { return cActualParamsAssignment_3_0; }

		//Strategy
		public RuleCall getActualParamsStrategyParserRuleCall_3_0_0() { return cActualParamsStrategyParserRuleCall_3_0_0; }

		//("," actualParams+=Strategy)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//actualParams+=Strategy
		public Assignment getActualParamsAssignment_3_1_1() { return cActualParamsAssignment_3_1_1; }

		//Strategy
		public RuleCall getActualParamsStrategyParserRuleCall_3_1_1_0() { return cActualParamsStrategyParserRuleCall_3_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class SaturationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Saturation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSaturationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSStrategyParserRuleCall_2_0 = (RuleCall)cSAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNINTTerminalRuleCall_4_0 = (RuleCall)cNAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Saturation returns ts::Saturation:
		//	"Saturation" "(" S=Strategy "," n=INT ")";
		public ParserRule getRule() { return rule; }

		//"Saturation" "(" S=Strategy "," n=INT ")"
		public Group getGroup() { return cGroup; }

		//"Saturation"
		public Keyword getSaturationKeyword_0() { return cSaturationKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//S=Strategy
		public Assignment getSAssignment_2() { return cSAssignment_2; }

		//Strategy
		public RuleCall getSStrategyParserRuleCall_2_0() { return cSStrategyParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//n=INT
		public Assignment getNAssignment_4() { return cNAssignment_4; }

		//INT
		public RuleCall getNINTTerminalRuleCall_4_0() { return cNINTTerminalRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class IfThenElseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfThenElse");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfThenElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cS1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cS1StrategyParserRuleCall_2_0 = (RuleCall)cS1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cS2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cS2StrategyParserRuleCall_4_0 = (RuleCall)cS2Assignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cS3Assignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cS3StrategyParserRuleCall_6_0 = (RuleCall)cS3Assignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IfThenElse returns ts::IfThenElse:
		//	"IfThenElse" "(" S1=Strategy "," S2=Strategy "," S3=Strategy ")";
		public ParserRule getRule() { return rule; }

		//"IfThenElse" "(" S1=Strategy "," S2=Strategy "," S3=Strategy ")"
		public Group getGroup() { return cGroup; }

		//"IfThenElse"
		public Keyword getIfThenElseKeyword_0() { return cIfThenElseKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//S1=Strategy
		public Assignment getS1Assignment_2() { return cS1Assignment_2; }

		//Strategy
		public RuleCall getS1StrategyParserRuleCall_2_0() { return cS1StrategyParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//S2=Strategy
		public Assignment getS2Assignment_4() { return cS2Assignment_4; }

		//Strategy
		public RuleCall getS2StrategyParserRuleCall_4_0() { return cS2StrategyParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//S3=Strategy
		public Assignment getS3Assignment_6() { return cS3Assignment_6; }

		//Strategy
		public RuleCall getS3StrategyParserRuleCall_6_0() { return cS3StrategyParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class SimpleStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleStrategy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEquationsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEquationsRewriteRuleParserRuleCall_1_0 = (RuleCall)cEquationsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEquationsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEquationsRewriteRuleParserRuleCall_2_1_0 = (RuleCall)cEquationsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SimpleStrategy returns ts::SimpleStrategy:
		//	"{" equations+=RewriteRule ("," equations+=RewriteRule)* "}";
		public ParserRule getRule() { return rule; }

		//"{" equations+=RewriteRule ("," equations+=RewriteRule)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//equations+=RewriteRule
		public Assignment getEquationsAssignment_1() { return cEquationsAssignment_1; }

		//RewriteRule
		public RuleCall getEquationsRewriteRuleParserRuleCall_1_0() { return cEquationsRewriteRuleParserRuleCall_1_0; }

		//("," equations+=RewriteRule)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//equations+=RewriteRule
		public Assignment getEquationsAssignment_2_1() { return cEquationsAssignment_2_1; }

		//RewriteRule
		public RuleCall getEquationsRewriteRuleParserRuleCall_2_1_0() { return cEquationsRewriteRuleParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class NotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Not");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSSimpleStrategyParserRuleCall_2_0 = (RuleCall)cSAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Not returns ts::Not:
		//	"Not" "(" S=SimpleStrategy ")";
		public ParserRule getRule() { return rule; }

		//"Not" "(" S=SimpleStrategy ")"
		public Group getGroup() { return cGroup; }

		//"Not"
		public Keyword getNotKeyword_0() { return cNotKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//S=SimpleStrategy
		public Assignment getSAssignment_2() { return cSAssignment_2; }

		//SimpleStrategy
		public RuleCall getSSimpleStrategyParserRuleCall_2_0() { return cSSimpleStrategyParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class FixpointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fixpoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFixpointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSStrategyParserRuleCall_2_0 = (RuleCall)cSAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Fixpoint returns ts::FixPointStrategy:
		//	"Fixpoint" "(" S=Strategy ")";
		public ParserRule getRule() { return rule; }

		//"Fixpoint" "(" S=Strategy ")"
		public Group getGroup() { return cGroup; }

		//"Fixpoint"
		public Keyword getFixpointKeyword_0() { return cFixpointKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//S=Strategy
		public Assignment getSAssignment_2() { return cSAssignment_2; }

		//Strategy
		public RuleCall getSStrategyParserRuleCall_2_0() { return cSStrategyParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cS1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cS1StrategyParserRuleCall_2_0 = (RuleCall)cS1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cS2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cS2StrategyParserRuleCall_4_0 = (RuleCall)cS2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Choice returns ts::Choice:
		//	"Choice" "(" S1=Strategy "," S2=Strategy ")";
		public ParserRule getRule() { return rule; }

		//"Choice" "(" S1=Strategy "," S2=Strategy ")"
		public Group getGroup() { return cGroup; }

		//"Choice"
		public Keyword getChoiceKeyword_0() { return cChoiceKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//S1=Strategy
		public Assignment getS1Assignment_2() { return cS1Assignment_2; }

		//Strategy
		public RuleCall getS1StrategyParserRuleCall_2_0() { return cS1StrategyParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//S2=Strategy
		public Assignment getS2Assignment_4() { return cS2Assignment_4; }

		//Strategy
		public RuleCall getS2StrategyParserRuleCall_4_0() { return cS2StrategyParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class UnionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Union");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cS1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cS1StrategyParserRuleCall_2_0 = (RuleCall)cS1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cS2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cS2StrategyParserRuleCall_4_0 = (RuleCall)cS2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Union returns ts::Union:
		//	"Union" "(" S1=Strategy "," S2=Strategy ")";
		public ParserRule getRule() { return rule; }

		//"Union" "(" S1=Strategy "," S2=Strategy ")"
		public Group getGroup() { return cGroup; }

		//"Union"
		public Keyword getUnionKeyword_0() { return cUnionKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//S1=Strategy
		public Assignment getS1Assignment_2() { return cS1Assignment_2; }

		//Strategy
		public RuleCall getS1StrategyParserRuleCall_2_0() { return cS1StrategyParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//S2=Strategy
		public Assignment getS2Assignment_4() { return cS2Assignment_4; }

		//Strategy
		public RuleCall getS2StrategyParserRuleCall_4_0() { return cS2StrategyParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSequenceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cS1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cS1StrategyParserRuleCall_2_0 = (RuleCall)cS1Assignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cS2Assignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cS2StrategyParserRuleCall_4_0 = (RuleCall)cS2Assignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Sequence returns ts::Sequence:
		//	"Sequence" "(" S1=Strategy "," S2=Strategy ")";
		public ParserRule getRule() { return rule; }

		//"Sequence" "(" S1=Strategy "," S2=Strategy ")"
		public Group getGroup() { return cGroup; }

		//"Sequence"
		public Keyword getSequenceKeyword_0() { return cSequenceKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//S1=Strategy
		public Assignment getS1Assignment_2() { return cS1Assignment_2; }

		//Strategy
		public RuleCall getS1StrategyParserRuleCall_2_0() { return cS1StrategyParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//S2=Strategy
		public Assignment getS2Assignment_4() { return cS2Assignment_4; }

		//Strategy
		public RuleCall getS2StrategyParserRuleCall_4_0() { return cS2StrategyParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class IdentityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdentityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cIdentityAction_1 = (Action)cGroup.eContents().get(1);
		
		//Identity returns ts::Identity:
		//	"Identity" {ts::Identity};
		public ParserRule getRule() { return rule; }

		//"Identity" {ts::Identity}
		public Group getGroup() { return cGroup; }

		//"Identity"
		public Keyword getIdentityKeyword_0() { return cIdentityKeyword_0; }

		//{ts::Identity}
		public Action getIdentityAction_1() { return cIdentityAction_1; }
	}

	public class FailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFailKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cFailAction_1 = (Action)cGroup.eContents().get(1);
		
		//Fail returns ts::Fail:
		//	"Fail" {ts::Fail};
		public ParserRule getRule() { return rule; }

		//"Fail" {ts::Fail}
		public Group getGroup() { return cGroup; }

		//"Fail"
		public Keyword getFailKeyword_0() { return cFailKeyword_0; }

		//{ts::Fail}
		public Action getFailAction_1() { return cFailAction_1; }
	}

	public class VariableStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableStrategy");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VariableStrategy returns ts::VariableStrategy:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ATermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATerm");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTermParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ATerm returns adt::ATerm:
		//	Term | Variable;
		public ParserRule getRule() { return rule; }

		//Term | Variable
		public Alternatives getAlternatives() { return cAlternatives; }

		//Term
		public RuleCall getTermParserRuleCall_0() { return cTermParserRuleCall_0; }

		//Variable
		public RuleCall getVariableParserRuleCall_1() { return cVariableParserRuleCall_1; }
	}

	public class ASortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASort");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSubSortParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSortParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ASort returns adt::ASort:
		//	SubSort | Sort;
		public ParserRule getRule() { return rule; }

		//SubSort | Sort
		public Alternatives getAlternatives() { return cAlternatives; }

		//SubSort
		public RuleCall getSubSortParserRuleCall_0() { return cSubSortParserRuleCall_0; }

		//Sort
		public RuleCall getSortParserRuleCall_1() { return cSortParserRuleCall_1; }
	}

	public class ADTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ADT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cADTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSignatureKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSignatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignatureSignatureParserRuleCall_3_0 = (RuleCall)cSignatureAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAxiomsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cEquationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cEquationsEquationParserRuleCall_4_1_0 = (RuleCall)cEquationsAssignment_4_1.eContents().get(0);
		private final Assignment cEquationsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cEquationsEquationParserRuleCall_4_2_0 = (RuleCall)cEquationsAssignment_4_2.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVariablesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVariablesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_5_1_0 = (RuleCall)cVariablesAssignment_5_1.eContents().get(0);
		private final Assignment cVariablesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cVariablesVariableDeclarationParserRuleCall_5_2_0 = (RuleCall)cVariablesAssignment_5_2.eContents().get(0);
		
		//ADT returns adt::ADT:
		//	"ADT" name=ID "Signature" signature=Signature ("Axioms" equations+=Equation equations+=Equation*)? ("Variables"
		//	variables+=VariableDeclaration variables+=VariableDeclaration*)?;
		public ParserRule getRule() { return rule; }

		//"ADT" name=ID "Signature" signature=Signature ("Axioms" equations+=Equation equations+=Equation*)? ("Variables"
		//variables+=VariableDeclaration variables+=VariableDeclaration*)?
		public Group getGroup() { return cGroup; }

		//"ADT"
		public Keyword getADTKeyword_0() { return cADTKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"Signature"
		public Keyword getSignatureKeyword_2() { return cSignatureKeyword_2; }

		//signature=Signature
		public Assignment getSignatureAssignment_3() { return cSignatureAssignment_3; }

		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_3_0() { return cSignatureSignatureParserRuleCall_3_0; }

		//(=> "Axioms" equations+=Equation equations+=Equation*)?
		public Group getGroup_4() { return cGroup_4; }

		//=> "Axioms"
		public Keyword getAxiomsKeyword_4_0() { return cAxiomsKeyword_4_0; }

		//equations+=Equation
		public Assignment getEquationsAssignment_4_1() { return cEquationsAssignment_4_1; }

		//Equation
		public RuleCall getEquationsEquationParserRuleCall_4_1_0() { return cEquationsEquationParserRuleCall_4_1_0; }

		//equations+=Equation*
		public Assignment getEquationsAssignment_4_2() { return cEquationsAssignment_4_2; }

		//Equation
		public RuleCall getEquationsEquationParserRuleCall_4_2_0() { return cEquationsEquationParserRuleCall_4_2_0; }

		//(=> "Variables" variables+=VariableDeclaration variables+=VariableDeclaration*)?
		public Group getGroup_5() { return cGroup_5; }

		//=> "Variables"
		public Keyword getVariablesKeyword_5_0() { return cVariablesKeyword_5_0; }

		//variables+=VariableDeclaration
		public Assignment getVariablesAssignment_5_1() { return cVariablesAssignment_5_1; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_5_1_0() { return cVariablesVariableDeclarationParserRuleCall_5_1_0; }

		//variables+=VariableDeclaration*
		public Assignment getVariablesAssignment_5_2() { return cVariablesAssignment_5_2; }

		//VariableDeclaration
		public RuleCall getVariablesVariableDeclarationParserRuleCall_5_2_0() { return cVariablesVariableDeclarationParserRuleCall_5_2_0; }
	}

	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSortsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSortsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSortsASortParserRuleCall_1_0 = (RuleCall)cSortsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSortsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSortsASortParserRuleCall_2_1_0 = (RuleCall)cSortsAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGeneratorsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGeneratorsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGeneratorsOperationParserRuleCall_3_1_0 = (RuleCall)cGeneratorsAssignment_3_1.eContents().get(0);
		private final Assignment cGeneratorsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cGeneratorsOperationParserRuleCall_3_2_0 = (RuleCall)cGeneratorsAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOperationsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cOperationsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cOperationsOperationParserRuleCall_4_1_0 = (RuleCall)cOperationsAssignment_4_1.eContents().get(0);
		private final Assignment cOperationsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cOperationsOperationParserRuleCall_4_2_0 = (RuleCall)cOperationsAssignment_4_2.eContents().get(0);
		
		//Signature returns adt::Signature:
		//	"Sorts" sorts+=ASort ("," sorts+=ASort)* ("Generators" generators+=Operation generators+=Operation*) ("Operations"
		//	operations+=Operation operations+=Operation*)?;
		public ParserRule getRule() { return rule; }

		//"Sorts" sorts+=ASort ("," sorts+=ASort)* ("Generators" generators+=Operation generators+=Operation*) ("Operations"
		//operations+=Operation operations+=Operation*)?
		public Group getGroup() { return cGroup; }

		//"Sorts"
		public Keyword getSortsKeyword_0() { return cSortsKeyword_0; }

		//sorts+=ASort
		public Assignment getSortsAssignment_1() { return cSortsAssignment_1; }

		//ASort
		public RuleCall getSortsASortParserRuleCall_1_0() { return cSortsASortParserRuleCall_1_0; }

		//("," sorts+=ASort)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//sorts+=ASort
		public Assignment getSortsAssignment_2_1() { return cSortsAssignment_2_1; }

		//ASort
		public RuleCall getSortsASortParserRuleCall_2_1_0() { return cSortsASortParserRuleCall_2_1_0; }

		//=> "Generators" generators+=Operation generators+=Operation*
		public Group getGroup_3() { return cGroup_3; }

		//=> "Generators"
		public Keyword getGeneratorsKeyword_3_0() { return cGeneratorsKeyword_3_0; }

		//generators+=Operation
		public Assignment getGeneratorsAssignment_3_1() { return cGeneratorsAssignment_3_1; }

		//Operation
		public RuleCall getGeneratorsOperationParserRuleCall_3_1_0() { return cGeneratorsOperationParserRuleCall_3_1_0; }

		//generators+=Operation*
		public Assignment getGeneratorsAssignment_3_2() { return cGeneratorsAssignment_3_2; }

		//Operation
		public RuleCall getGeneratorsOperationParserRuleCall_3_2_0() { return cGeneratorsOperationParserRuleCall_3_2_0; }

		//(=> "Operations" operations+=Operation operations+=Operation*)?
		public Group getGroup_4() { return cGroup_4; }

		//=> "Operations"
		public Keyword getOperationsKeyword_4_0() { return cOperationsKeyword_4_0; }

		//operations+=Operation
		public Assignment getOperationsAssignment_4_1() { return cOperationsAssignment_4_1; }

		//Operation
		public RuleCall getOperationsOperationParserRuleCall_4_1_0() { return cOperationsOperationParserRuleCall_4_1_0; }

		//operations+=Operation*
		public Assignment getOperationsAssignment_4_2() { return cOperationsAssignment_4_2; }

		//Operation
		public RuleCall getOperationsOperationParserRuleCall_4_2_0() { return cOperationsOperationParserRuleCall_4_2_0; }
	}

	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSortASortCrossReference_2_0 = (CrossReference)cSortAssignment_2.eContents().get(0);
		private final RuleCall cSortASortIDTerminalRuleCall_2_0_1 = (RuleCall)cSortASortCrossReference_2_0.eContents().get(1);
		
		//VariableDeclaration returns adt::VariableDeclaration:
		//	name=ID ":" sort=[adt::ASort];
		public ParserRule getRule() { return rule; }

		//name=ID ":" sort=[adt::ASort]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//sort=[adt::ASort]
		public Assignment getSortAssignment_2() { return cSortAssignment_2; }

		//[adt::ASort]
		public CrossReference getSortASortCrossReference_2_0() { return cSortASortCrossReference_2_0; }

		//ID
		public RuleCall getSortASortIDTerminalRuleCall_2_0_1() { return cSortASortIDTerminalRuleCall_2_0_1; }
	}

	public class EquationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftHandTermAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftHandTermATermParserRuleCall_0_0 = (RuleCall)cLeftHandTermAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightHandTermAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightHandTermATermParserRuleCall_2_0 = (RuleCall)cRightHandTermAssignment_2.eContents().get(0);
		
		//Equation returns adt::Equation:
		//	leftHandTerm=ATerm "=" rightHandTerm=ATerm;
		public ParserRule getRule() { return rule; }

		//leftHandTerm=ATerm "=" rightHandTerm=ATerm
		public Group getGroup() { return cGroup; }

		//leftHandTerm=ATerm
		public Assignment getLeftHandTermAssignment_0() { return cLeftHandTermAssignment_0; }

		//ATerm
		public RuleCall getLeftHandTermATermParserRuleCall_0_0() { return cLeftHandTermATermParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//rightHandTerm=ATerm
		public Assignment getRightHandTermAssignment_2() { return cRightHandTermAssignment_2; }

		//ATerm
		public RuleCall getRightHandTermATermParserRuleCall_2_0() { return cRightHandTermATermParserRuleCall_2_0; }
	}

	public class RewriteRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RewriteRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftHandTermAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftHandTermATermParserRuleCall_0_0 = (RuleCall)cLeftHandTermAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightHandTermAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightHandTermATermParserRuleCall_2_0 = (RuleCall)cRightHandTermAssignment_2.eContents().get(0);
		
		//RewriteRule returns adt::Equation:
		//	leftHandTerm=ATerm "->" rightHandTerm=ATerm;
		public ParserRule getRule() { return rule; }

		//leftHandTerm=ATerm "->" rightHandTerm=ATerm
		public Group getGroup() { return cGroup; }

		//leftHandTerm=ATerm
		public Assignment getLeftHandTermAssignment_0() { return cLeftHandTermAssignment_0; }

		//ATerm
		public RuleCall getLeftHandTermATermParserRuleCall_0_0() { return cLeftHandTermATermParserRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//rightHandTerm=ATerm
		public Assignment getRightHandTermAssignment_2() { return cRightHandTermAssignment_2; }

		//ATerm
		public RuleCall getRightHandTermATermParserRuleCall_2_0() { return cRightHandTermATermParserRuleCall_2_0; }
	}

	public class SubSortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SubSort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSuperSortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSuperSortASortCrossReference_2_0 = (CrossReference)cSuperSortAssignment_2.eContents().get(0);
		private final RuleCall cSuperSortASortIDTerminalRuleCall_2_0_1 = (RuleCall)cSuperSortASortCrossReference_2_0.eContents().get(1);
		
		//SubSort returns adt::SubSort:
		//	name=ID "<" superSort=[adt::ASort];
		public ParserRule getRule() { return rule; }

		//name=ID "<" superSort=[adt::ASort]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }

		//superSort=[adt::ASort]
		public Assignment getSuperSortAssignment_2() { return cSuperSortAssignment_2; }

		//[adt::ASort]
		public CrossReference getSuperSortASortCrossReference_2_0() { return cSuperSortASortCrossReference_2_0; }

		//ID
		public RuleCall getSuperSortASortIDTerminalRuleCall_2_0_1() { return cSuperSortASortIDTerminalRuleCall_2_0_1; }
	}

	public class SortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Sort");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSortAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Sort returns adt::Sort:
		//	{adt::Sort} name=ID;
		public ParserRule getRule() { return rule; }

		//{adt::Sort} name=ID
		public Group getGroup() { return cGroup; }

		//{adt::Sort}
		public Action getSortAction_0() { return cSortAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTermAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cOperationSymbolAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOperationSymbolOperationCrossReference_1_0 = (CrossReference)cOperationSymbolAssignment_1.eContents().get(0);
		private final RuleCall cOperationSymbolOperationIDTerminalRuleCall_1_0_1 = (RuleCall)cOperationSymbolOperationCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSubtermsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSubtermsATermParserRuleCall_2_1_0 = (RuleCall)cSubtermsAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cCommaKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cSubtermsAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cSubtermsATermParserRuleCall_2_2_1_0 = (RuleCall)cSubtermsAssignment_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//Term returns adt::Term:
		//	{adt::Term} operationSymbol=[adt::Operation] ("(" subterms+=ATerm ("," subterms+=ATerm)* ")")?;
		public ParserRule getRule() { return rule; }

		//{adt::Term} operationSymbol=[adt::Operation] ("(" subterms+=ATerm ("," subterms+=ATerm)* ")")?
		public Group getGroup() { return cGroup; }

		//{adt::Term}
		public Action getTermAction_0() { return cTermAction_0; }

		//operationSymbol=[adt::Operation]
		public Assignment getOperationSymbolAssignment_1() { return cOperationSymbolAssignment_1; }

		//[adt::Operation]
		public CrossReference getOperationSymbolOperationCrossReference_1_0() { return cOperationSymbolOperationCrossReference_1_0; }

		//ID
		public RuleCall getOperationSymbolOperationIDTerminalRuleCall_1_0_1() { return cOperationSymbolOperationIDTerminalRuleCall_1_0_1; }

		//("(" subterms+=ATerm ("," subterms+=ATerm)* ")")?
		public Group getGroup_2() { return cGroup_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//subterms+=ATerm
		public Assignment getSubtermsAssignment_2_1() { return cSubtermsAssignment_2_1; }

		//ATerm
		public RuleCall getSubtermsATermParserRuleCall_2_1_0() { return cSubtermsATermParserRuleCall_2_1_0; }

		//("," subterms+=ATerm)*
		public Group getGroup_2_2() { return cGroup_2_2; }

		//","
		public Keyword getCommaKeyword_2_2_0() { return cCommaKeyword_2_2_0; }

		//subterms+=ATerm
		public Assignment getSubtermsAssignment_2_2_1() { return cSubtermsAssignment_2_2_1; }

		//ATerm
		public RuleCall getSubtermsATermParserRuleCall_2_2_1_0() { return cSubtermsATermParserRuleCall_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclarationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cDeclarationVariableDeclarationCrossReference_1_0 = (CrossReference)cDeclarationAssignment_1.eContents().get(0);
		private final RuleCall cDeclarationVariableDeclarationTERMVARTerminalRuleCall_1_0_1 = (RuleCall)cDeclarationVariableDeclarationCrossReference_1_0.eContents().get(1);
		
		//Variable returns adt::Variable:
		//	{adt::Variable} declaration=[adt::VariableDeclaration|TERMVAR];
		public ParserRule getRule() { return rule; }

		//{adt::Variable} declaration=[adt::VariableDeclaration|TERMVAR]
		public Group getGroup() { return cGroup; }

		//{adt::Variable}
		public Action getVariableAction_0() { return cVariableAction_0; }

		//declaration=[adt::VariableDeclaration|TERMVAR]
		public Assignment getDeclarationAssignment_1() { return cDeclarationAssignment_1; }

		//[adt::VariableDeclaration|TERMVAR]
		public CrossReference getDeclarationVariableDeclarationCrossReference_1_0() { return cDeclarationVariableDeclarationCrossReference_1_0; }

		//TERMVAR
		public RuleCall getDeclarationVariableDeclarationTERMVARTerminalRuleCall_1_0_1() { return cDeclarationVariableDeclarationTERMVARTerminalRuleCall_1_0_1; }
	}

	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cFormalParametersAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cFormalParametersASortCrossReference_2_0_0 = (CrossReference)cFormalParametersAssignment_2_0.eContents().get(0);
		private final RuleCall cFormalParametersASortIDTerminalRuleCall_2_0_0_1 = (RuleCall)cFormalParametersASortCrossReference_2_0_0.eContents().get(1);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cFormalParametersAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final CrossReference cFormalParametersASortCrossReference_2_1_1_0 = (CrossReference)cFormalParametersAssignment_2_1_1.eContents().get(0);
		private final RuleCall cFormalParametersASortIDTerminalRuleCall_2_1_1_0_1 = (RuleCall)cFormalParametersASortCrossReference_2_1_1_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cReturnTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cReturnTypeASortCrossReference_3_0 = (CrossReference)cReturnTypeAssignment_3.eContents().get(0);
		private final RuleCall cReturnTypeASortIDTerminalRuleCall_3_0_1 = (RuleCall)cReturnTypeASortCrossReference_3_0.eContents().get(1);
		
		//Operation returns adt::Operation:
		//	name=ID ":" (formalParameters+=[adt::ASort] ("," formalParameters+=[adt::ASort])* "->")? returnType=[adt::ASort];
		public ParserRule getRule() { return rule; }

		//name=ID ":" (formalParameters+=[adt::ASort] ("," formalParameters+=[adt::ASort])* "->")? returnType=[adt::ASort]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//(formalParameters+=[adt::ASort] ("," formalParameters+=[adt::ASort])* "->")?
		public Group getGroup_2() { return cGroup_2; }

		//formalParameters+=[adt::ASort]
		public Assignment getFormalParametersAssignment_2_0() { return cFormalParametersAssignment_2_0; }

		//[adt::ASort]
		public CrossReference getFormalParametersASortCrossReference_2_0_0() { return cFormalParametersASortCrossReference_2_0_0; }

		//ID
		public RuleCall getFormalParametersASortIDTerminalRuleCall_2_0_0_1() { return cFormalParametersASortIDTerminalRuleCall_2_0_0_1; }

		//("," formalParameters+=[adt::ASort])*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//formalParameters+=[adt::ASort]
		public Assignment getFormalParametersAssignment_2_1_1() { return cFormalParametersAssignment_2_1_1; }

		//[adt::ASort]
		public CrossReference getFormalParametersASortCrossReference_2_1_1_0() { return cFormalParametersASortCrossReference_2_1_1_0; }

		//ID
		public RuleCall getFormalParametersASortIDTerminalRuleCall_2_1_1_0_1() { return cFormalParametersASortIDTerminalRuleCall_2_1_1_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2_2() { return cHyphenMinusGreaterThanSignKeyword_2_2; }

		//returnType=[adt::ASort]
		public Assignment getReturnTypeAssignment_3() { return cReturnTypeAssignment_3; }

		//[adt::ASort]
		public CrossReference getReturnTypeASortCrossReference_3_0() { return cReturnTypeASortCrossReference_3_0; }

		//ID
		public RuleCall getReturnTypeASortIDTerminalRuleCall_3_0_1() { return cReturnTypeASortIDTerminalRuleCall_3_0_1; }
	}
	
	
	private TransitionSystemElements pTransitionSystem;
	private TerminalRule tTERMVAR;
	private TransitionElements pTransition;
	private AuxiliaryElements pAuxiliary;
	private StrategyElements pStrategy;
	private NonVariableStrategyElements pNonVariableStrategy;
	private PredefStratsElements pPredefStrats;
	private OneElements pOne;
	private DeclaredStrategyInstanceElements pDeclaredStrategyInstance;
	private SaturationElements pSaturation;
	private IfThenElseElements pIfThenElse;
	private SimpleStrategyElements pSimpleStrategy;
	private NotElements pNot;
	private FixpointElements pFixpoint;
	private ChoiceElements pChoice;
	private UnionElements pUnion;
	private SequenceElements pSequence;
	private IdentityElements pIdentity;
	private FailElements pFail;
	private VariableStrategyElements pVariableStrategy;
	private ATermElements pATerm;
	private ASortElements pASort;
	private ADTElements pADT;
	private SignatureElements pSignature;
	private VariableDeclarationElements pVariableDeclaration;
	private EquationElements pEquation;
	private RewriteRuleElements pRewriteRule;
	private SubSortElements pSubSort;
	private SortElements pSort;
	private TermElements pTerm;
	private VariableElements pVariable;
	private OperationElements pOperation;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TransitionSystemDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ch.unige.cui.smv.stratagem.xtext.TransitionSystemDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TransitionSystem returns ts::TransitionSystem:
	//	"TransitionSystem" adt=ADT "initialState" "=" initialState=Term "Strategies" auxiliary+=Auxiliary* "Transitions"
	//	transitions+=Transition transitions+=Transition*;
	public TransitionSystemElements getTransitionSystemAccess() {
		return (pTransitionSystem != null) ? pTransitionSystem : (pTransitionSystem = new TransitionSystemElements());
	}
	
	public ParserRule getTransitionSystemRule() {
		return getTransitionSystemAccess().getRule();
	}

	//terminal TERMVAR:
	//	"$" "^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getTERMVARRule() {
		return (tTERMVAR != null) ? tTERMVAR : (tTERMVAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "TERMVAR"));
	} 

	//Transition returns ts::DeclaredStrategy:
	//	name=ID "=" body=NonVariableStrategy;
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//Auxiliary returns ts::DeclaredStrategy:
	//	name=ID ("(" formalParams+=VariableStrategy ("," formalParams+=VariableStrategy)* ")")? "=" body=NonVariableStrategy;
	public AuxiliaryElements getAuxiliaryAccess() {
		return (pAuxiliary != null) ? pAuxiliary : (pAuxiliary = new AuxiliaryElements());
	}
	
	public ParserRule getAuxiliaryRule() {
		return getAuxiliaryAccess().getRule();
	}

	//Strategy returns ts::Strategy:
	//	NonVariableStrategy | VariableStrategy;
	public StrategyElements getStrategyAccess() {
		return (pStrategy != null) ? pStrategy : (pStrategy = new StrategyElements());
	}
	
	public ParserRule getStrategyRule() {
		return getStrategyAccess().getRule();
	}

	//NonVariableStrategy returns ts::NonVariableStrategy:
	//	PredefStrats | DeclaredStrategyInstance;
	public NonVariableStrategyElements getNonVariableStrategyAccess() {
		return (pNonVariableStrategy != null) ? pNonVariableStrategy : (pNonVariableStrategy = new NonVariableStrategyElements());
	}
	
	public ParserRule getNonVariableStrategyRule() {
		return getNonVariableStrategyAccess().getRule();
	}

	//PredefStrats returns ts::NonVariableStrategy:
	//	Identity | Fail | Choice | Sequence | Fixpoint | IfThenElse | Not | SimpleStrategy | One | Saturation | Union;
	public PredefStratsElements getPredefStratsAccess() {
		return (pPredefStrats != null) ? pPredefStrats : (pPredefStrats = new PredefStratsElements());
	}
	
	public ParserRule getPredefStratsRule() {
		return getPredefStratsAccess().getRule();
	}

	//One returns ts::One:
	//	"One" "(" S=Strategy "," n=INT ")";
	public OneElements getOneAccess() {
		return (pOne != null) ? pOne : (pOne = new OneElements());
	}
	
	public ParserRule getOneRule() {
		return getOneAccess().getRule();
	}

	//DeclaredStrategyInstance returns ts::DeclaredStrategyInstance:
	//	{ts::DeclaredStrategyInstance} declaration=[ts::DeclaredStrategy] "(" (actualParams+=Strategy (","
	//	actualParams+=Strategy)*)? ")";
	public DeclaredStrategyInstanceElements getDeclaredStrategyInstanceAccess() {
		return (pDeclaredStrategyInstance != null) ? pDeclaredStrategyInstance : (pDeclaredStrategyInstance = new DeclaredStrategyInstanceElements());
	}
	
	public ParserRule getDeclaredStrategyInstanceRule() {
		return getDeclaredStrategyInstanceAccess().getRule();
	}

	//Saturation returns ts::Saturation:
	//	"Saturation" "(" S=Strategy "," n=INT ")";
	public SaturationElements getSaturationAccess() {
		return (pSaturation != null) ? pSaturation : (pSaturation = new SaturationElements());
	}
	
	public ParserRule getSaturationRule() {
		return getSaturationAccess().getRule();
	}

	//IfThenElse returns ts::IfThenElse:
	//	"IfThenElse" "(" S1=Strategy "," S2=Strategy "," S3=Strategy ")";
	public IfThenElseElements getIfThenElseAccess() {
		return (pIfThenElse != null) ? pIfThenElse : (pIfThenElse = new IfThenElseElements());
	}
	
	public ParserRule getIfThenElseRule() {
		return getIfThenElseAccess().getRule();
	}

	//SimpleStrategy returns ts::SimpleStrategy:
	//	"{" equations+=RewriteRule ("," equations+=RewriteRule)* "}";
	public SimpleStrategyElements getSimpleStrategyAccess() {
		return (pSimpleStrategy != null) ? pSimpleStrategy : (pSimpleStrategy = new SimpleStrategyElements());
	}
	
	public ParserRule getSimpleStrategyRule() {
		return getSimpleStrategyAccess().getRule();
	}

	//Not returns ts::Not:
	//	"Not" "(" S=SimpleStrategy ")";
	public NotElements getNotAccess() {
		return (pNot != null) ? pNot : (pNot = new NotElements());
	}
	
	public ParserRule getNotRule() {
		return getNotAccess().getRule();
	}

	//Fixpoint returns ts::FixPointStrategy:
	//	"Fixpoint" "(" S=Strategy ")";
	public FixpointElements getFixpointAccess() {
		return (pFixpoint != null) ? pFixpoint : (pFixpoint = new FixpointElements());
	}
	
	public ParserRule getFixpointRule() {
		return getFixpointAccess().getRule();
	}

	//Choice returns ts::Choice:
	//	"Choice" "(" S1=Strategy "," S2=Strategy ")";
	public ChoiceElements getChoiceAccess() {
		return (pChoice != null) ? pChoice : (pChoice = new ChoiceElements());
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}

	//Union returns ts::Union:
	//	"Union" "(" S1=Strategy "," S2=Strategy ")";
	public UnionElements getUnionAccess() {
		return (pUnion != null) ? pUnion : (pUnion = new UnionElements());
	}
	
	public ParserRule getUnionRule() {
		return getUnionAccess().getRule();
	}

	//Sequence returns ts::Sequence:
	//	"Sequence" "(" S1=Strategy "," S2=Strategy ")";
	public SequenceElements getSequenceAccess() {
		return (pSequence != null) ? pSequence : (pSequence = new SequenceElements());
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//Identity returns ts::Identity:
	//	"Identity" {ts::Identity};
	public IdentityElements getIdentityAccess() {
		return (pIdentity != null) ? pIdentity : (pIdentity = new IdentityElements());
	}
	
	public ParserRule getIdentityRule() {
		return getIdentityAccess().getRule();
	}

	//Fail returns ts::Fail:
	//	"Fail" {ts::Fail};
	public FailElements getFailAccess() {
		return (pFail != null) ? pFail : (pFail = new FailElements());
	}
	
	public ParserRule getFailRule() {
		return getFailAccess().getRule();
	}

	//VariableStrategy returns ts::VariableStrategy:
	//	name=ID;
	public VariableStrategyElements getVariableStrategyAccess() {
		return (pVariableStrategy != null) ? pVariableStrategy : (pVariableStrategy = new VariableStrategyElements());
	}
	
	public ParserRule getVariableStrategyRule() {
		return getVariableStrategyAccess().getRule();
	}

	//ATerm returns adt::ATerm:
	//	Term | Variable;
	public ATermElements getATermAccess() {
		return (pATerm != null) ? pATerm : (pATerm = new ATermElements());
	}
	
	public ParserRule getATermRule() {
		return getATermAccess().getRule();
	}

	//ASort returns adt::ASort:
	//	SubSort | Sort;
	public ASortElements getASortAccess() {
		return (pASort != null) ? pASort : (pASort = new ASortElements());
	}
	
	public ParserRule getASortRule() {
		return getASortAccess().getRule();
	}

	//ADT returns adt::ADT:
	//	"ADT" name=ID "Signature" signature=Signature ("Axioms" equations+=Equation equations+=Equation*)? ("Variables"
	//	variables+=VariableDeclaration variables+=VariableDeclaration*)?;
	public ADTElements getADTAccess() {
		return (pADT != null) ? pADT : (pADT = new ADTElements());
	}
	
	public ParserRule getADTRule() {
		return getADTAccess().getRule();
	}

	//Signature returns adt::Signature:
	//	"Sorts" sorts+=ASort ("," sorts+=ASort)* ("Generators" generators+=Operation generators+=Operation*) ("Operations"
	//	operations+=Operation operations+=Operation*)?;
	public SignatureElements getSignatureAccess() {
		return (pSignature != null) ? pSignature : (pSignature = new SignatureElements());
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}

	//VariableDeclaration returns adt::VariableDeclaration:
	//	name=ID ":" sort=[adt::ASort];
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return (pVariableDeclaration != null) ? pVariableDeclaration : (pVariableDeclaration = new VariableDeclarationElements());
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}

	//Equation returns adt::Equation:
	//	leftHandTerm=ATerm "=" rightHandTerm=ATerm;
	public EquationElements getEquationAccess() {
		return (pEquation != null) ? pEquation : (pEquation = new EquationElements());
	}
	
	public ParserRule getEquationRule() {
		return getEquationAccess().getRule();
	}

	//RewriteRule returns adt::Equation:
	//	leftHandTerm=ATerm "->" rightHandTerm=ATerm;
	public RewriteRuleElements getRewriteRuleAccess() {
		return (pRewriteRule != null) ? pRewriteRule : (pRewriteRule = new RewriteRuleElements());
	}
	
	public ParserRule getRewriteRuleRule() {
		return getRewriteRuleAccess().getRule();
	}

	//SubSort returns adt::SubSort:
	//	name=ID "<" superSort=[adt::ASort];
	public SubSortElements getSubSortAccess() {
		return (pSubSort != null) ? pSubSort : (pSubSort = new SubSortElements());
	}
	
	public ParserRule getSubSortRule() {
		return getSubSortAccess().getRule();
	}

	//Sort returns adt::Sort:
	//	{adt::Sort} name=ID;
	public SortElements getSortAccess() {
		return (pSort != null) ? pSort : (pSort = new SortElements());
	}
	
	public ParserRule getSortRule() {
		return getSortAccess().getRule();
	}

	//Term returns adt::Term:
	//	{adt::Term} operationSymbol=[adt::Operation] ("(" subterms+=ATerm ("," subterms+=ATerm)* ")")?;
	public TermElements getTermAccess() {
		return (pTerm != null) ? pTerm : (pTerm = new TermElements());
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//Variable returns adt::Variable:
	//	{adt::Variable} declaration=[adt::VariableDeclaration|TERMVAR];
	public VariableElements getVariableAccess() {
		return (pVariable != null) ? pVariable : (pVariable = new VariableElements());
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//Operation returns adt::Operation:
	//	name=ID ":" (formalParameters+=[adt::ASort] ("," formalParameters+=[adt::ASort])* "->")? returnType=[adt::ASort];
	public OperationElements getOperationAccess() {
		return (pOperation != null) ? pOperation : (pOperation = new OperationElements());
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
