/*
 * generated by Xtext
 */
package ch.unige.cui.smv.stratagem.xtext.scoping

import ch.unige.cui.smv.metamodel.ts.TransitionSystem
import ch.unige.smv.cui.metamodel.adt.ATerm
import ch.unige.smv.cui.metamodel.adt.Term
import ch.unige.smv.cui.metamodel.adt.Variable
import javax.inject.Inject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

import static org.eclipse.xtext.scoping.Scopes.*
import ch.unige.smv.cui.metamodel.adt.Equation
import ch.unige.smv.cui.metamodel.adt.ADT
import ch.unige.cui.smv.metamodel.ts.SimpleStrategy

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class TransitionSystemDslScopeProvider extends AbstractDeclarativeScopeProvider {

	@Inject
	private IQualifiedNameProvider nameProvider;

	def scope_Operation(Term term, EReference ref) {
		val container = term.eContainer
		if (container instanceof TransitionSystem) {
			term.adt = (container as TransitionSystem).adt
		} else if (container instanceof Term) {
			term.adt = (container as Term).adt
		} else if (container instanceof Equation) {
			val superContainer = (container as Equation).eContainer
			if (superContainer instanceof ADT) {
				term.adt = superContainer as ADT
			} else { // we can be anywhere in the strategies tree, we go up
			 	var superSuperContainer = superContainer.eContainer
				while (!(superSuperContainer instanceof TransitionSystem)) {
					superSuperContainer = superSuperContainer.eContainer
				}
				term.adt = (superSuperContainer as TransitionSystem).adt
			}
		}
		scopeFor(term.adt.signature.allOperations, nameProvider, IScope.NULLSCOPE)
	}




	def scope_VariableDeclaration(Variable variable, EReference ref) {
		val container = variable.eContainer
		if (container instanceof TransitionSystem) {
			variable.adt = (container as TransitionSystem).adt
		} else if (container instanceof ATerm) {
			variable.adt = (container as ATerm).adt
		} else if (container instanceof Equation) {
			val superContainer = (container as Equation).eContainer
			if (superContainer instanceof ADT) {
				variable.adt = superContainer as ADT
			} else { // we can be anywhere in the strategies tree, we go up
			 	var superSuperContainer = superContainer.eContainer
				while (!(superSuperContainer instanceof TransitionSystem)) {
					superSuperContainer = superSuperContainer.eContainer
				}
				variable.adt = (superSuperContainer as TransitionSystem).adt
			}
		}
		scopeFor(variable.adt.variables, nameProvider, IScope.NULLSCOPE)
	}
}
