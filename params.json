{"name":"Stratagem","tagline":"Stratagem - DD- and rewriting strategies- based model checker","body":"Description\r\n===========\r\n\r\nStrataGEM (Strategy Generic Extensible Modelchecker) is a tool aimed at the analysis of Petri nets and other models of concurrency by means of symbolic model-checking techniques. StrataGEM marries the well know concepts of Term Rewriting (TR) to the efficiency of Decision Diagrams (DDs). TR systems are a great way to describe the semantics of a system, being readable and compact, but their direct implementation tends to be rather slow on large sets of terms. On the other hand, DDs have demonstrated their efficiency for model-checking, but translating a system semantics into efficient DDs operations is an expert’s matter. StrataGEM describes the semantics of a system in terms of strategies over a TR system, and automatically translates these rules into operations on DD to handle the model-checking. The ultimate goal of StrataGEM is to become a verification framework for the different variants of Petri nets by separating the semantics of the model from the computation that performs model-checking.\r\n\r\nCitation\r\n========\r\n\r\nIf you want to cite stratagem in your papers, please use the following citation:\r\n\r\n    @conference {17,\r\n      title = {StrataGEM: A Generic Petri Net Verification Framework},\r\n      booktitle = {Proceedings of the 35th International Conference on Application and Theory of Petri Nets and Concurrency},\r\n      year = {2014},\r\n      month = {06/2014},\r\n      publisher = {Springer},\r\n      organization = {Springer},\r\n      address = {Tunis, Tunisia},\r\n      abstract = {In this paper we present the Strategy Generic Extensible Modelchecker (StrataGEM), a tool aimed at the analysis of Petri nets and other models of concurrency by means of symbolic model-checking techniques. StrataGEM marries the well know concepts of Term Rewrit- ing (TR) to the efficiency of Decision Diagrams (DDs). TR systems are a great way to describe the semantics of a system, being readable and com- pact, but their direct implementation tends to be rather slow on large sets of terms. On the other hand, DDs have demonstrated their efficiency for model-checking, but translating a system semantics into efficient DDs operations is an expert{\\textquoteright}s matter. StrataGEM describes the semantics of a system in terms of strategies over a TR system, and automatically trans- lates these rules into operations on DD to handle the model-checking. The ultimate goal of StrataGEM is to become a verification framework for the different variants of Petri nets by separating the semantics of the model from the computation that performs model-checking.},\r\n      url = {http://edmundo.lopezbobeda.net/sites/default/files/pdfs/petrinets2014.pdf},\r\n      author = {L{\\'o}pez B{\\'o}beda, Edmundo and Maximilien Colange and Didier Buchs},\r\n      editor = {Gianfranco Ciardo and Ekkart Kindler}\r\n    }\r\n\r\nFor word users it looks like this:\r\n![Edmundo López Bóbeda and Maximilien Colange and Didier Buchs, StrataGEM: A Generic Petri Net Verification Framework ](https://raw.githubusercontent.com/mundacho/stratagem/master/stratagem/resources/citation.png \"Citation in word format\")\r\n\r\n\r\nBinary distribution\r\n===================\r\n\r\nYou can download the binaries from [here](https://sourceforge.net/projects/stratagem-mc/).\r\n\r\nFeatures\r\n========\r\n\r\nStratagem v0.4.2 can perform the following tasks:\r\n\r\n- Read transition systems in its own langauge (.ts) directly from the a text file and perform its state space calculation. You can see an example of a transition system file [here](https://github.com/mundacho/stratagem/blob/master/stratagem/resources/philo.ts)\r\n- Read a Place/Transition Petri net and calculate its state space.\r\n- Automatically decompose a P/T Petri net in modules.\r\n- Transform a P/T Petri net into a rewriting based transition system.\r\n- Use different strategies to speed up the calculation of the state space. In particular it can use anonymization and saturation.\r\n- Read a clustering file to optimize the state space generation.\r\n- Write the terms of the state space (warning: There can be a lot of terms in the state space!)\r\n\r\nInput formats\r\n=============\r\n\r\nThe following input formats are supported:\r\n\r\n- Transition system (.ts) can be read from a text file. Represents a transition system.\r\n- [PNML](http://www.pnml.org) for P/T nets\r\n- DiViNe. In the current version the divine formalism can only be used via API.\r\n\r\n\r\nRequirements\r\n============\r\n\r\nTo run stratagem you need:\r\n\r\n- Java 1.7 or later\r\n\r\nTo compile stratagem you need:\r\n\r\n- sbt 0.13.5\r\n- Java 1.7 or later\r\n\r\nDocumentation\r\n=============\r\n\r\nScalaDoc is available [here](http://alpina.unige.ch/jenkins/job/stratagem/javadoc/?#package).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}